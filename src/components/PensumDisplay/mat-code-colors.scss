// How to use:
// 1. Each color is defined as a sass varible
// 2. Variations are made for normal, hover, active, disabled, table-odd, table-even, table-hover
// 3. Each is placed into a var for its corresponding class, as mat-bg and mat-fg variables.
$colors: (
  "default": hsl(240, 0%, 43%),
  "passed": hsl(120, 100%, 50%),
  "course": hsl(40, 100%, 50%),
  "missing": hsl(0, 100%, 50%),
);

@function create-color($base, $ld) {
  $h: hue($base);
  $s: saturation($base);
  $l: lightness($base);
  $a: opacity($base);

  // TODO: Make this work :V
  // On dark: super saturated, except for gray
  // On bright: 
  $color: (
    "normal":     hsla($h, $s * (0.5 + 1.3*$ld), $l + 0.7*$ld, $a),
    "hover":      hsla($h, $s * (0.4 + 0.2*$ld), 0.80*$l  + $ld, $a),
    "active":     hsla($h, $s * (1.0 + 0.0*$ld), 0.85*$l + 0.5*$ld, $a),
    "disabled":   hsla($h, $s * (0.2 + 0.5*$ld), $l + $ld, $a),
    "table-odd":  hsla($h, $s, $l, $a * 0.30),
    "table-even": hsla($h, $s, $l, $a * 0.20)
  );

  @return $color;
}

@mixin create-css-vars($name, $color, $mat-fg, $light-delta) {
  $parsed: create-color($color, $light-delta);

  #{$name} {
    --mat-bg: #{map-get($parsed, "normal")};
    --mat-fg: #{$mat-fg};

    &:hover, &.hover {
      --mat-bg: #{map-get($parsed, "hover")};
    }

    &:active, &.active {
      --mat-bg: #{map-get($parsed, "active")};
    }

    &:disabled, &.disabled, &.not-active {
      --mat-bg: #{map-get($parsed, "disabled")};
    }
    
    &.row-mat {
      --rowmat-bg: #{map-get($parsed, "table-odd")};
      &.even {
        --rowmat-bg: #{map-get($parsed, "table-even")};
      }
    }

  }
}


// Default cases
.row-mat {
  --rowmat-bg: hsla(0,0%,50%,0);
  &.even {
    --rowmat-bg: hsla(0,0%,50%,0.12);
  }
}


// Light mode
@each $key, $color in $colors {
  @include create-css-vars(".#{$key}", $color, black, 32%);
}


// Dark mode
.color-scheme-dark {
  @each $key, $color in $colors {
    @include create-css-vars(".#{$key}", $color, white, 0%);
  }
}