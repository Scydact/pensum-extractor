/** Declaration file generated by dts-gen */
declare module 'basicprimitives' {
  export class Interval {
    constructor(arg0: any, arg1: any, arg2: any, ...args: any[]);

    clone(): any;

    equalTo(interval: any): any;

    overlaps(interval: any): any;

    toString(): any;

    width(): any;

  }

  export class Matrix {
    constructor(arg0: any, arg1: any, arg2: any, arg3: any, ...args: any[]);

    determinant(): any;

  }

  export class Point {
    constructor(arg0: any, arg1: any, ...args: any[]);

    clone(): any;

    distanceTo(arg0: any, arg1: any, ...args: any[]): any;

    equalTo(point: any): any;

    getCSS(units: any): any;

    scale(scale: any): any;

    swap(point: any): void;

    toString(units: any): any;

  }

  export class Rect {
    constructor(arg0: any, arg1: any, arg2: any, arg3: any, ...args: any[]);

    addRect(arg0: any, arg1: any, arg2: any, arg3: any, ...args: any[]): any;

    bottom(): any;

    centerPoint(): any;

    contains(arg0: any, arg1: any, ...args: any[]): any;

    cropByRect(rect: any): any;

    equalTo(rect: any): any;

    getCSS(units: any): any;

    getProjectionPoint(point: any): any;

    horizontalCenter(): any;

    invert(): any;

    isEmpty(): any;

    left(): any;

    loopEdges(callback: any): any;

    offset(arg0: any, arg1: any, arg2: any, arg3: any, ...args: any[]): any;

    overlaps(rect: any): any;

    right(): any;

    scale(scale: any): any;

    toString(units: any): any;

    top(): any;

    translate(x: any, y: any): any;

    validate(): void;

    verticalCenter(): any;

    verticalInterval(): any;

  }

  export class Size {
    constructor(arg0: any, arg1: any, ...args: any[]);

    addThickness(thickness: any): any;

    cropBySize(size: any): any;

    getCSS(units: any): any;

    invert(): any;

    isEmpty(): any;

    maxSize(size: any): any;

    removeThickness(thickness: any): any;

    scale(scale: any): any;

    space(): any;

    validate(): void;

  }

  export class Thickness {
    constructor(arg0: any, arg1: any, arg2: any, arg3: any, ...args: any[]);

    addThickness(arg0: any, arg1: any, arg2: any, arg3: any, ...args: any[]): any;

    isEmpty(): any;

    isNegative(): any;

    isPositive(): any;

    maxThickness(thickness: any): any;

    scale(scale: any): any;

    toString(units: any): any;

  }

  export class Vector {
    constructor(arg0: any, arg1: any, ...args: any[]);

    equalTo(vector: any): any;

    getIntersectionPoint(vector: any, strict: any, rounding: any): any;

    getLine(): any;

    getLineKey(): any;

    getMiddlePoint(): any;

    intersect(vector: any): any;

    isNull(): any;

    length(): any;

    offset(offset: any): void;

    relateTo(vector: any): any;

  }

  export const AdviserPlacementType: {
    Auto: number;
    Left: number;
    Right: number;
  };

  export const AnnotationType: {
    Background: number;
    Connector: number;
    HighlightPath: number;
    Label: number;
    Level: number;
    Shape: number;
  };

  export const ChildrenPlacementType: {
    Auto: number;
    Horizontal: number;
    Matrix: number;
    Vertical: number;
  };

  export const Colors: {
    AliceBlue: string;
    AntiqueWhite: string;
    Aqua: string;
    Aquamarine: string;
    Azure: string;
    Beige: string;
    Bisque: string;
    Black: string;
    BlanchedAlmond: string;
    Blue: string;
    BlueViolet: string;
    Bronze: string;
    Brown: string;
    BurlyWood: string;
    CadetBlue: string;
    ChartReuse: string;
    Chocolate: string;
    Coral: string;
    CornflowerBlue: string;
    Cornsilk: string;
    Crimson: string;
    Cyan: string;
    DarkBlue: string;
    DarkCyan: string;
    DarkGoldenrod: string;
    DarkGray: string;
    DarkGreen: string;
    DarkKhaki: string;
    DarkMagenta: string;
    DarkOliveGreen: string;
    DarkOrchid: string;
    DarkRed: string;
    DarkSalmon: string;
    DarkSeaGreen: string;
    DarkSlateBlue: string;
    DarkSlateGray: string;
    DarkTurquoise: string;
    DarkViolet: string;
    Darkorange: string;
    DeepPink: string;
    DeepSkyBlue: string;
    DimGray: string;
    DodgerBlue: string;
    FireBrick: string;
    FloralWhite: string;
    ForestGreen: string;
    Fuchsia: string;
    Gainsboro: string;
    GhostWhite: string;
    Gold: string;
    Goldenrod: string;
    Gray: string;
    Green: string;
    GreenYellow: string;
    Honeydew: string;
    Hotpink: string;
    IndianRed: string;
    Indigo: string;
    Ivory: string;
    Khaki: string;
    Lavender: string;
    LavenderBlush: string;
    Lawngreen: string;
    Lemonchiffon: string;
    LightBlue: string;
    LightCoral: string;
    LightCyan: string;
    LightGoldenrodYellow: string;
    LightGray: string;
    LightGreen: string;
    LightPink: string;
    LightSalmon: string;
    LightSeaGreen: string;
    LightSkyBlue: string;
    LightSlateGray: string;
    LightSteelBlue: string;
    LightYellow: string;
    Lime: string;
    Limegreen: string;
    Linen: string;
    Magenta: string;
    Maroon: string;
    MediumAquamarine: string;
    MediumBlue: string;
    MediumOrchid: string;
    MediumPurple: string;
    MediumSeaGreen: string;
    MediumSlateBlue: string;
    MediumSpringGreen: string;
    MediumTurquoise: string;
    MediumVioletRed: string;
    MidnightBlue: string;
    MintCream: string;
    MistyRose: string;
    Moccasin: string;
    NavajoWhite: string;
    Navy: string;
    Oldlace: string;
    Olive: string;
    Olivedrab: string;
    Orange: string;
    OrangeRed: string;
    Orchid: string;
    PaleGoldenRod: string;
    PaleGreen: string;
    PaleTurquoise: string;
    PaleVioletRed: string;
    Papayawhip: string;
    Peachpuff: string;
    Peru: string;
    Pink: string;
    Plum: string;
    PowderBlue: string;
    Purple: string;
    Red: string;
    RosyBrown: string;
    RoyalBlue: string;
    SaddleBrown: string;
    Salmon: string;
    SandyBrown: string;
    SeaGreen: string;
    Seashell: string;
    Sienna: string;
    Silver: string;
    SkyBlue: string;
    SlateBlue: string;
    SlateGray: string;
    Snow: string;
    SpringGreen: string;
    SteelBlue: string;
    Tan: string;
    Teal: string;
    Thistle: string;
    Tomato: string;
    Turquoise: string;
    Violet: string;
    Wheat: string;
    White: string;
    WhiteSmoke: string;
    Yellow: string;
    YellowGreen: string;
  };

  export const ConnectorLabelPlacementType: {
    Between: number;
    From: number;
    To: number;
  };

  export const ConnectorPlacementType: {
    Offbeat: number;
    Straight: number;
  };

  export const ConnectorShapeType: {
    BothWay: number;
    OneWay: number;
    TwoWay: number;
  };

  export const ConnectorStyleType: {
    Extra: number;
    Highlight: number;
    Regular: number;
  };

  export const ConnectorType: {
    Angular: number;
    Curved: number;
    Squared: number;
  };

  export const ElbowType: {
    Bevel: number;
    Dot: number;
    None: number;
    Round: number;
  };

  export const Enabled: {
    Auto: number;
    False: number;
    True: number;
  };

  export const GroupByType: {
    Children: number;
    None: number;
    Parents: number;
  };

  export const HorizontalAlignmentType: {
    Center: number;
    Left: number;
    Right: number;
  };

  export const ItemType: {
    Adviser: number;
    AdviserPartner: number;
    Assistant: number;
    GeneralPartner: number;
    LimitedPartner: number;
    Regular: number;
    SubAdviser: number;
    SubAssistant: number;
  };

  export const JsonML: {
  };

  export const LabelType: {
    Dummy: number;
    Fixed: number;
    None: number;
    Regular: number;
  };

  export const Layers: {
    Annotation: number;
    BackgroundAnnotation: number;
    BackgroundAnnotations: number;
    BackgroundConnectorAnnotation: number;
    BackgroundHighlightPathAnnotations: number;
    Connector: number;
    Controls: number;
    Cursor: number;
    ForegroundAnnotations: number;
    ForegroundConnectorAnnotation: number;
    ForegroundHighlightPathAnnotations: number;
    Highlight: number;
    Item: number;
    Label: number;
    LevelAnnotation: number;
    Marker: number;
  };

  export const LineType: {
    Dashed: number;
    Dotted: number;
    Solid: number;
  };

  export const NavigationMode: {
    CursorOnly: number;
    Default: number;
    HighlightOnly: number;
    Inactive: number;
  };

  export const NeighboursSelectionMode: {
    ParentsAndChildren: number;
    ParentsChildrenSiblingsAndSpouses: number;
  };

  export const OrientationType: {
    Bottom: number;
    Left: number;
    None: number;
    Right: number;
    Top: number;
  };

  export const PageFitMode: {
    AutoSize: number;
    FitToPage: number;
    None: number;
    PageHeight: number;
    PageWidth: number;
    SelectionOnly: number;
  };

  export const PlacementType: {
    Auto: number;
    Bottom: number;
    BottomLeft: number;
    BottomRight: number;
    Left: number;
    LeftBottom: number;
    LeftTop: number;
    Right: number;
    RightBottom: number;
    RightTop: number;
    Top: number;
    TopLeft: number;
    TopRight: number;
  };

  export const RenderingMode: {
    Create: number;
    Update: number;
  };

  export const SegmentType: {
    CubicArc: number;
    Dot: number;
    Line: number;
    Move: number;
    QuadraticArc: number;
  };

  export const SelectionPathMode: {
    FullStack: number;
    None: number;
  };

  export const ShapeType: {
    Circle: number;
    CrossOut: number;
    FramedOval: number;
    FramedRhombus: number;
    FramedTriangle: number;
    FramedWedge: number;
    None: number;
    Oval: number;
    Rectangle: number;
    Rhombus: number;
    Triangle: number;
    Wedge: number;
  };

  export const SideFlag: {
    Bottom: number;
    Left: number;
    Right: number;
    Top: number;
  };

  export const TextOrientationType: {
    Auto: number;
    Horizontal: number;
    RotateLeft: number;
    RotateRight: number;
  };

  export const UpdateMode: {
    PositonHighlight: number;
    Recreate: number;
    Refresh: number;
  };

  export const VectorRelationType: {
    Collinear: number;
    None: number;
    Null: number;
    Opposite: number;
  };

  export const VerticalAlignmentType: {
    Bottom: number;
    Middle: number;
    Top: number;
  };

  export const Visibility: {
    Auto: number;
    Dot: number;
    Invisible: number;
    Line: number;
    Normal: number;
  };

  export const ZOrderType: {
    Auto: number;
    Background: number;
    Foreground: number;
  };

  export function BackgroundAnnotationConfig(arg0: any, ...args: any[]): void;

  export function ConnectorAnnotationConfig(arg0: any, arg1: any, ...args: any[]): void;

  export function FamConfig(name: any): void;

  export function FamDiagram(element: any, options: any, templates: any): any;

  export function FamDiagramPdfkit(options: any, templates: any): any;

  export function FamEventArgs(): void;

  export function FamItemConfig(arg0: any, arg1: any, arg2: any, arg3: any, arg4: any, ...args: any[]): void;

  export function FamTaskManagerFactory(getOptions: any, getGraphics: any, getLayout: any, setLayout: any, templates: any): any;

  export function Family(source: any, ...args: any[]): any;

  export function FamilyAlignment(thisArg: any, family: any, treeLevels: any, onItemSize: any): any;

  export function FamilyMargins(...args: any[]): any;

  export function FibonacciHeap(isMaximum: any): any;

  export function Graph(): any;

  export function HeapResult(node: any): void;

  export function HighlightPathAnnotationConfig(arg0: any, ...args: any[]): void;

  export function LCA(tree: any): any;

  export function LabelAnnotationConfig(arg0: any, arg1: any, ...args: any[]): void;

  export function LevelAnnotationConfig(arg0: any, ...args: any[]): void;

  export function LinkedHashItems(): any;

  export function OrgConfig(name: any): void;

  export function OrgDiagram(element: any, options: any, templates: any): any;

  export function OrgDiagramPdfkit(options: any, templates: any): any;

  export function OrgEventArgs(): void;

  export function OrgItemConfig(arg0: any, arg1: any, arg2: any, arg3: any, arg4: any, ...args: any[]): void;

  export function OrgTaskManagerFactory(getOptions: any, getGraphics: any, getLayout: any, setLayout: any, templates: any): any;

  export function PaletteItemConfig(arg0: any, arg1: any, arg2: any, ...args: any[]): void;

  export function Pile(): any;

  export function QuadTree(minimalSize: any): any;

  export function RMQ(items: any): any;

  export function ShapeAnnotationConfig(arg0: any, ...args: any[]): void;

  export function SortedList(): any;

  export function SpatialIndex(sizes: any): any;

  export function TemplateConfig(): void;

  export function Tree(source: any, ...args: any[]): any;

  export function TreeLevels(source: any): any;

  export function beforeOpacity(color: any, opacity: any): any;

  export function binarySearch(items: any, callback: any, startMinimum: any, startMaximum: any): any;

  export function cloneObject(source: any, isShallow: any): any;

  export function compareArrays(array1: any, array2: any, getKeyFunc: any): any;

  export function getBlue(color: any): any;

  export function getColorHexValue(color: any): any;

  export function getColorName(color: any): any;

  export function getCrossingRectangles(thisArg: any, rectangles: any, onCrossing: any): any;

  export function getElementOffset(element: any): any;

  export function getElementsByName(thisArg: any, parent: any, name: any, onNode: any): void;

  export function getFamilyLoops(family: any, debug: any): any;

  export function getFamilyUnits(family: any): any;

  export function getFixOfPixelAlignment(element: any): any;

  export function getGreen(color: any): any;

  export function getHashCode(value: any): any;

  export function getInnerSize(element: any): any;

  export function getLiniarBreaks(values: any): any;

  export function getMergedIntervals(thisArg: any, items: any, onItem: any): any;

  export function getMergedRectangles(thisArg: any, items: any, onItem: any): any;

  export function getMinimumCrossingRows(thisArg: any, rectangles: any, onItem: any): any;

  export function getRed(color: any): any;

  export function hasClass(element: any, className: any): any;

  export function highestContrast(baseColor: any, firstColor: any, secondColor: any): any;

  export function isEmptyObject(item: any): any;

  export function isEven(value: any): any;

  export function isNullOrEmpty(value: any): any;

  export function isObject(item: any): any;

  export function loop(thisArg: any, items: any, onItem: any): void;

  export function luminosity(firstColor: any, secondColor: any): any;

  export function mergeObjects(destination: any, source: any, ...args: any[]): any;

  export function mergeSort(arrays: any, getItemWeight: any, ignoreDuplicates: any): any;

  export function splitCamelCaseName(name: any): any;

  export function stopPropagation(event: any): void;

}